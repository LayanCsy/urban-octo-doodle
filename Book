import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

public class Borrow {

    private Book currentBook;
    public static ArrayList<Borrow> borrowedBooks = new ArrayList<>(3);
    private String bookName;
    private String bookAuther;
    private String borrowingDate;

    public Borrow(String bookName, String bookAuther) {
        this.bookName = bookName;
        this.bookAuther = bookAuther;
        this.borrowingDate = toString();
    }

    // to borrow book
    public String borrowBook(Book currentBook) throws IOException {
        //to check if the user iligable to borrow 
        ArrayList<String> names = new ArrayList<>(3);
        for (int i = 0; i < borrowedBooks.size(); i++) {
            names.add(borrowedBooks.get(i).bookName);
        }
        Collections.sort(names);
        for (Borrow b : borrowedBooks) {
            if (b != null) {
                if ((b.bookName).equals(currentBook.getBookName())) {
                    return "you have already borrowed " + currentBook.getBookName() + ".";
                }
            } else {
                borrowedBooks.add(this);
                currentBook.removeBook(currentBook.getBookName());
                return "you have borrowed " + currentBook.getBookName() + " successfully.";
            }
        }//end for loop
        return "you can't borrow " + currentBook.getBookName() + "\nyou have reached maximum capacity.";
    }//end borrowBook

    //to return book
    public String returnBook(Book currentBook) throws IOException {
        //to check if the user borrowed the book
        for (Borrow b : borrowedBooks) {
            if ((b.bookName).equals(currentBook.getBookName())) {
                borrowedBooks.remove(this);
                currentBook.addBook(currentBook.getBookName());
                return "you have returned " + currentBook.getBookName() + " successfully.";
            }
        }//end for loop
        return "you didn't borrow " + currentBook.getBookName() + ".";
    }//end returnBook

    /*@Override
    public boolean equals(Object o) {
        return this.currentBook == o;
    }*/
}//end Borrow
