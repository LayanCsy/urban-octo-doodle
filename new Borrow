import java.io.IOException;
import java.util.Date;

public class Borrow implements Account{

    //private Book currentBook;
    private String bookNamee;
    private String bookAuther;
    private int quantity;
    private Date borrowingDate;
    private Book book2 = new Novels();

    public Borrow(Book book) throws IOException {

        this.bookNamee = book.getBookName();
        this.bookAuther = book.getA();
        this.quantity = book.getQuantity();
        this.borrowingDate = new Date();
    }

    // to borrow book
    public String borrowBook() throws IOException {

        //to check if the user iligable to borrow 
        for (int i = 0; i <= 2; i++) {
            if ((User.vaildUser.getBorrowedBooks()[i]) != null) {
                if (equals((User.vaildUser.getBorrowedBooks()[i].bookNamee))) {
                    return "you have already borrowed \"" + bookNamee + "\".";
                }
            } else if (quantity <= 0) {
                return "You can't borrow \"" + bookNamee + "\" .\nit's out of stock.";
            } else {
                User.vaildUser.getBorrowedBooks()[i] = this;
                book2.removeBook(bookNamee);
                quantity--;
                return "you have borrowed \"" + bookNamee + "\" successfully.";
            }
        }//end for loop
        return "you can't borrow \"" + bookNamee + "\"\nyou have reached maximum capacity.";
    }//end borrowBook

    //to return book
    public String returnBook() throws IOException {
        //to check if the user borrowed the book

        for (int i = 0; i <= 2; i++) {
            if (equals((User.vaildUser.getBorrowedBooks()[i].bookNamee))) {
                User.vaildUser.getBorrowedBooks()[i] = null;
                book2.addBook(bookNamee);
                quantity++;
                return "you have returned \"" + bookNamee + "\" successfully.";
            }
        }//end for loop
        return "you didn't borrow \"" + bookNamee + "\".";
    }//end returnBook

    public Date getBorrowingDate() {
        return borrowingDate;
    }
    
    public int getQuantity() {
        return quantity;
    }

    public Book getBook2 (){
        return book2;
    }
    public void setBook2 (Book b){
        book2 = b;
    }
    
    @Override
    public boolean equals(Object o) {
        return bookNamee == o;
    }

    @Override
    public String toString() {
        return "";
    }

    @Override
    public boolean authentication(String userID, String userPassword) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public String getList() throws NullPointerException {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}//end Borrow
