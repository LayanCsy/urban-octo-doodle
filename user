/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package library;


/**
 *
 * @author faisa
 */
import java.util.ArrayList;

public class User implements Account{
    //9999999
    //static int i;
    private String userID ;
    private String userName ;
    private String userPassword;
    private String userType; 
    private Borrow[] borrowedBooks ; // assotiation relationship with borrow
    public static User vaildUser ;
    public static ArrayList <User> users = new ArrayList<>();
    
    
    //no-args constructor 
    public User (Borrow[] n){
        borrowedBooks = n;
    }
    
    //constructor for the login procces 
//    public User (String userID , String userPassword){
////        this();
//        this.userID = userID;
//        this.userPassword = userPassword;
//    }
    
    //constructor used to add vaild users 
    public User (String userID , String userPassword  , String userName, String userType ){
//        this();
        borrowedBooks = new Borrow[allowedBooks];
        this.userID = userID;
        this.userPassword = userPassword;
        this.userName = userName ;
        this.userType = userType;
        // 102 كذا رح نكرر اليوزر كل مرة يسجل دخوله شوفي سطر
        User.users.add(this);
        
    }
    


    public String getUserName (){
        return userName ;
    }
    
    public void setUserName (String userName){
        this.userName = userName;
    }
    
    // immutable data field 
    public String getUserID (){
        return userID;
    }
    
    public String getUserPassword (){
        return userPassword;
    }
    
    public void setUserPassword (String userPassword ){
        this.userPassword = userPassword;
    }
    
    public String getUserType (){
        return userType ;
    }
    
    
    public Borrow [] getBorrowedBooks (){
         return borrowedBooks;
    }
    
    
    
    public  ArrayList <User> getUsersList(){
        return users;
    }
       
    
    @Override
     public String getList () {
         String list = "" ;
        for (Borrow borrowedBook : borrowedBooks) {
            if (borrowedBook  != null){
                list= list + borrowedBook.toString() + "\n";
                
            }else 
                 list +="";
     }return list;
     }
     
     //method to cheack if the user is vaild or not
     
     
     public boolean authentication (String userID , String userPassword){
        for ( int i = 0 ; i <users.size() ; i++){
            if (userID.equals(users.get(i).getUserID())){
               if (userPassword.equals(users.get(i).getUserPassword())){
                   //vaildUser = new User (users.get(i).borrowedBooks);
                   return true;
               }
            }     
        } // end for loop
        
         return  false ;
    }
    
     
     
    @Override
     public String toString(){
         
         return "\nID: " + userID + "\nPassword: " + userPassword + "\nName: " + userName + "\nType: " + userType 
                 + "\nBorrowed books: " + getList ();
     }   
}
